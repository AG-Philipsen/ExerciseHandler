#!/bin/bash
#
# Hook script to check the commit message.
#
# ENFORCED POLICY:
#  1) The first line of the commit must be at maximum 60 chars.
#     This is the hard limit for GitHub at which a commit message is hidden.
#     See https://chris.beams.io/posts/git-commit/ for more infortmation.
#  2) The first line of the commit must have at least 8 chars.
#  3) The first line must begin with a character
#  4) A small letter at the beginning of the first line is capitalised
#  5) Any character among ".?!" at the end of the first line is removed
#     in a repetitive way (e.g. "commit..!!!" -> "commit")
#  6) The second line must be empty
#  7) Any following line after the second must be 72 chars at maximum
#  8) Trailing spaces at begin and end of the first two lines are removed
#
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#-----------------------------------------------------------------------------#

repositoryTopLevelPath="$(git rev-parse --show-toplevel)"
source $repositoryTopLevelPath/hooks/AuxiliaryFunctions.sh || exit -2

#Abort immediately on empty commit
if IsCommitMessageEmpty "$1"; then
    AbortCommit "Committed aborted due to empty message!"
fi
#Store commit message in a file to allow user to resume and edit commit
dotGitFolderPath="$repositoryTopLevelPath/.git"
commitMessageFile="$dotGitFolderPath/COMMIT_MSG"
RemoveTrailingSpacesAtBeginOfFirstThreeLines "$1"
RemoveTrailingSpacesAtEndOfEachLine "$1"
AddEndOfLineAtEndOfFileIfMissing "$1"
CapitalizeFirstLetterFirstLine "$1"
RemovePointAtTheEndFirstLine "$1"
# It is nicer to store a clean message in case the user has to resume editing after a
# hook failure due to a violation of the rules (storing just the file would lead to
# having the bunch of commented lines in the resumed commit more than once)
# NOTE: quit at "diff" in case of "git commit -v".
sed -n -e '/^#/d' -e '/^diff --git/q' -e 'p;d' "$1" > "$commitMessageFile"

#If message is a merge or a revert do not complain about format
if ! IsCommitMessageAMerge "$commitMessageFile" && ! IsCommitMessageARevert "$commitMessageFile"; then
    #Check format
    if IsFirstLineNotStartingWithLetter "$commitMessageFile"; then
        AbortCommit "The first line must start with a letter!" GiveAdviceToResumeCommit
    elif IsFirstLineTooShort "$commitMessageFile"; then
        AbortCommit "The first line of your commit must be at least 8 chars long!" GiveAdviceToResumeCommit
    elif IsFirstLineTooLong "$commitMessageFile"; then
        AbortCommit "The first line of your commit exceeds the 60-char limit!" GiveAdviceToResumeCommit
    elif IsSecondLineNotEmpty "$commitMessageFile"; then
        AbortCommit "The second line of your commit must be empty!" GiveAdviceToResumeCommit
    elif IsAnyOfTheLinesAfterTheSecondTooLong "$commitMessageFile"; then
        AbortCommit "All the lines of your commit after the second must be shorter than 72 chars!" GiveAdviceToResumeCommit
    fi
    #Forbid commits directly on the master (at the moment only a warning but
    #the commit will be aborted when using gitflow in development)
    actualBranch=`git rev-parse --abbrev-ref HEAD`
    if [ "$actualBranch" = 'master' ]; then
        errecho '\n'
        errecho 'WARNING:' 1 11
        errecho 'You just made a commit on the master branch. Please undo it if it was not intended!\n' 11
        errecho '\n'
        #AbortCommit "To commit directly on the master branch is forbidden!" GiveAdviceToResumeCommit
    fi
fi

#Remove commit file if not needed
rm -f "$commitMessageFile" || exit 1
